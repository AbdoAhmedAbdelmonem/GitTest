 [
  {
    "numb": 1,
    "type": "Multiple Choices",
    "question": "What is the purpose of a setter method in Java?",
    "answer": "B) To change the value of a private field.",
    "options": [
      "A) To initialize the class.",
      "B) To change the value of a private field.",
      "C) To print the value of a field.",
      "D) To delete an object."
    ]
  },
  {
    "numb": 2,
    "type": "Multiple Choices",
    "question": "What is a class's constructor called if it does not take any arguments?",
    "answer": "A) Default constructor",
    "options": [
      "A) Default constructor",
      "B) Parameterized constructor",
      "C) Copy constructor",
      "D) Static constructor"
    ]
  },
  {
    "numb": 3,
    "type": "Multiple Choices",
    "question": "What is the use of the 'super' keyword in Java?",
    "answer": "B) To access the methods and variables of the parent class.",
    "options": [
      "A) To access the methods of the child class.",
      "B) To access the methods and variables of the parent class.",
      "C) To access the private variables of the class.",
      "D) To create a new object."
    ]
  },
  {
    "numb": 4,
    "type": "Multiple Choices",
    "question": "Which of the following is true about a private access modifier?",
    "answer": "B) The member can be accessed only within its own class.",
    "options": [
      "A) The member can be accessed by any class.",
      "B) The member can be accessed only within its own class.",
      "C) The member can be accessed within the same package.",
      "D) The member can be accessed by subclasses."
    ]
  },
  {
    "numb": 5,
    "type": "Multiple Choices",
    "question": "Which of the following statements about constructors is false?",
    "answer": "C) Constructors can return a value.",
    "options": [
      "A) Constructors can be overloaded.",
      "B) Constructors have the same name as the class.",
      "C) Constructors can return a value.",
      "D) Constructors are called automatically when an object is created."
    ]
  },
  {
    "numb": 6,
    "type": "Multiple Choices",
    "question": "What is the purpose of the 'this' keyword in Java?",
    "answer": "B) To refer to the current object.",
    "options": [
      "A) To refer to the current class.",
      "B) To refer to the current object.",
      "C) To refer to the parent class.",
      "D) To refer to the child class."
    ]
  },
  {
    "numb": 7,
    "type": "Multiple Choices",
    "question": "Which method is used to initialize an object's state in a class?",
    "answer": "D) Constructor",
    "options": [
      "A) init()",
      "B) start()",
      "C) new()",
      "D) Constructor"
    ]
  },
  {
    "numb": 8,
    "type": "Multiple Choices",
    "question": "What is the purpose of a constructor in a class?",
    "answer": "A) To initialize an object when it is created.",
    "options": [
      "A) To initialize an object when it is created.",
      "B) To destroy an object when it is no longer needed.",
      "C) To define methods in a class.",
      "D) To inherit properties from another class."
    ]
  },
  {
    "numb": 9,
    "type": "Multiple Choices",
    "question": "Which of the following is true about constructors in Java?",
    "answer": "B) They must have the same name as the class",
    "options": [
      "A) They can be inherited",
      "B) They must have the same name as the class",
      "C) They have a return type",
      "D) None of the above"
    ]
  },
  {
    "numb": 10,
    "type": "Multiple Choices",
    "question": "Two or more methods in a class may have the same name as long as their parameter lists are different. What is this called?",
    "answer": "A) Method overloading",
    "options": [
      "A) Method overloading",
      "B) Method stack overflowing",
      "C) Method reformatting",
      "D) Method overriding"
    ]
  },
  {
    "numb": 11,
    "type": "Multiple Choices",
    "question": "Which of the following is NOT a characteristic of constructors?",
    "answer": "B) Constructors can be static.",
    "options": [
      "A) Constructors cannot be abstract.",
      "B) Constructors can be static.",
      "C) Constructors do not have a return type.",
      "D) Constructors have the same name as the class."
    ]
  },
  {
    "numb": 12,
    "type": "Multiple Choices",
    "question": "What is the default constructor?",
    "answer": "C) A constructor automatically provided by Java if no constructor is defined.",
    "options": [
      "A) A constructor provided by the programmer.",
      "B) A constructor with a single argument.",
      "C) A constructor automatically provided by Java if no constructor is defined.",
      "D) A constructor with multiple arguments."
    ]
  },
  {
    "numb": 13,
    "type": "Multiple Choices",
    "question": "Can a class have more than one constructor?",
    "answer": "B) Yes, a class can have multiple constructors with different parameters.",
    "options": [
      "A) No, a class can only have one constructor.",
      "B) Yes, a class can have multiple constructors with different parameters.",
      "C) Yes, but only if they have the same parameters.",
      "D) No, it is illegal to have more than one constructor."
    ]
  },
  {
    "numb": 14,
    "type": "Multiple Choices",
    "question": "What happens if a class does not have any constructor defined?",
    "answer": "B) The class will have a default constructor provided by Java.",
    "options": [
      "A) The class will not compile.",
      "B) The class will have a default constructor provided by Java.",
      "C) The class will inherit a constructor from the superclass.",
      "D) The class will be abstract."
    ]
  },
  {
    "numb": 15,
    "type": "Multiple Choices",
    "question": "Can constructors be overloaded?",
    "answer": "B) Yes, constructors can be overloaded by defining multiple constructors with different parameter lists.",
    "options": [
      "A) No, constructors cannot be overloaded.",
      "B) Yes, constructors can be overloaded by defining multiple constructors with different parameter lists.",
      "C) Yes, but only two constructors are allowed per class.",
      "D) No, overloading is not possible in Java."
    ]
  },
  {
    "numb": 16,
    "type": "Multiple Choices",
    "question": "Which keyword is used to call a constructor from another constructor in the same class?",
    "answer": "B) this",
    "options": [
      "A) super",
      "B) this",
      "C) new",
      "D) return"
    ]
  },
  {
    "numb": 17,
    "type": "Multiple Choices",
    "question": "What will be the result of running the following code?",
    "answer": "B) 10",
    "options": [
      "A) 5",
      "B) 10",
      "C) Compilation error",
      "D) Runtime error"
    ],
    "image": "/quizzes/programming/programming_images/4-17 p2.png"
  },
  {
    "numb": 18,
    "type": "Multiple Choices",
    "question": "What is the output of the following code snippet?",
    "answer": "A) Default Constructor Parameterized Constructor",
    "options": [
      "A) Default Constructor Parameterized Constructor",
      "B) Parameterized Constructor Default Constructor",
      "C) Compilation Error",
      "D) Runtime Error"
    ],
    "image": "/quizzes/programming/programming_images/4-18 p2.png"
  },
  {
    "numb": 19,
    "type": "Multiple Choices",
    "question": "What is the result of the following class definition?",
    "answer": "B) The class will compile, and an object will be created with the value 5.",
    "options": [
      "A) The class will not compile because the constructor has parameters.",
      "B) The class will compile, and an object will be created with the value 5.",
      "C) The class will not compile because of the private variable.",
      "D) The class will compile but will throw a runtime exception."
    ],
    "image": "/quizzes/programming/programming_images/4-19 p2.png"
  },
  {
    "numb": 20,
    "type": "Multiple Choices",
    "question": "Can a constructor be private?",
    "answer": "D) Yes, constructors can be private.",
    "options": [
      "A) No, constructors cannot be private.",
      "B) Constructors can be private only in interfaces.",
      "C) Constructors can be private only in abstract classes.",
      "D) Yes, constructors can be private."
    ]
  }
]